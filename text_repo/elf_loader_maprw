
    int size = 0x19000;
    int executableHandle, writableHandle;
    Ps4MemoryProtected *m;
    Ps4MemoryProtected *memory;
    long pageSize = sysconf(_SC_PAGESIZE);

    if(memory == NULL)
            return PS4_ERROR_ARGUMENT_PRIMARY_MISSING;

    if(size == 0)
            return PS4_ERROR_ARGUMENT_SIZE_NULL;

    m = (Ps4MemoryProtected *)malloc(sizeof(Ps4MemoryProtected));
    if(m == NULL)
            return PS4_ERROR_OUT_OF_MEMORY;

    m->size = (size / pageSize + 1) * pageSize; // align to pageSize

    sceKernelJitCreateSharedMemory(0, m->size, PROT_READ | PROT_WRITE | PROT_EXEC, &executableHandle);
    if(executableHandle == 0)
    {
        printf("error 1");
        return 0;
    }
    sceKernelJitCreateAliasOfSharedMemory(executableHandle, PROT_READ | PROT_WRITE, &writableHandle);
    if(writableHandle == 0)
    {
        printf("error 2");
        return 0;
    }
    //sceKernelJitMapSharedMemory(m->writableHandle, PROT_CPU_READ | PROT_CPU_WRITE, &writable);
    m->executable = mmap(0x4000, m->size, PROT_READ | PROT_EXEC, MAP_SHARED, executableHandle, 0);
    if(m->executable == MAP_FAILED)
    {
        printf("error 3");
        return 0;
    }
    m->writable = mmap(NULL, m->size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_TYPE, writableHandle, 0);
    if(m->writable == MAP_FAILED)
    {
        printf("error 4");
        return 0;
    }

    void * writable2 = mmap(0x20000, m->size, PROT_READ | PROT_WRITE, MAP_ANONYMOUS | MAP_TYPE, -1, 0);

    *(char*)writable2 = 0x10;

    close(executableHandle);
    close(writableHandle);

    printf("mapped executable: %llX\n", (uint64_t)(m->executable));
    printf("mapped writeable: %llX\n", (uint64_t)(m->writable));
    printf("mapped writeable2: %llX const: %x\n", (uint64_t)(writable2), MAP_ANONYMOUS | MAP_TYPE);
    

    *(char*)(m->writable) = 0xc3;

    functionPtr = m->executable;

    functionPtr();
